// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentalStore.Data;

#nullable disable

namespace RentalStore.Migrations
{
    [DbContext(typeof(RentalStoreContext))]
    partial class RentalStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "gender_type_is", new[] { "male", "female" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilmActor", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    b.HasKey("FilmId", "ActorId")
                        .HasName("film_actor_pkey");

                    b.HasIndex("ActorId");

                    b.ToTable("film_actor", (string)null);
                });

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    b.HasKey("FilmId", "GenreId")
                        .HasName("film_genre_pkey");

                    b.HasIndex("GenreId");

                    b.ToTable("film_genre", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("actors_pkey");

                    b.ToTable("actors", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Num")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("num");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("addresses_pkey");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "UserId" }, "addresses_user_id_key")
                        .IsUnique();

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("cities_pkey");

                    b.HasIndex("RegionId");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateOnly>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("release_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("Synopsis")
                        .HasColumnType("text")
                        .HasColumnName("synopsis");

                    b.HasKey("Id")
                        .HasName("films_pkey");

                    b.ToTable("films", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("genres_pkey");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("regions_pkey");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("DeadlineDate")
                        .HasColumnType("date")
                        .HasColumnName("deadline_date");

                    b.Property<int>("FilmId")
                        .HasColumnType("integer")
                        .HasColumnName("film_id");

                    b.Property<DateOnly>("RentalDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("rental_date")
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("return_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("rentals_pkey");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("RentalStore.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("gender_user")
                        .HasColumnType("gender_type_is");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FilmActor", b =>
                {
                    b.HasOne("RentalStore.Model.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_actor");

                    b.HasOne("RentalStore.Model.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_film");
                });

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.HasOne("RentalStore.Model.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_film");

                    b.HasOne("RentalStore.Model.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_genre");
                });

            modelBuilder.Entity("RentalStore.Model.Address", b =>
                {
                    b.HasOne("RentalStore.Model.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("addresses_city_id_fkey");

                    b.HasOne("RentalStore.Model.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("RentalStore.Model.Address", "UserId")
                        .HasConstraintName("addresses_user_id_fkey");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentalStore.Model.City", b =>
                {
                    b.HasOne("RentalStore.Model.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("cities_region_id_fkey");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("RentalStore.Model.Rental", b =>
                {
                    b.HasOne("RentalStore.Model.Film", "Film")
                        .WithMany("Rentals")
                        .HasForeignKey("FilmId")
                        .IsRequired()
                        .HasConstraintName("rentals_film_id_fkey");

                    b.HasOne("RentalStore.Model.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("rentals_user_id_fkey");

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentalStore.Model.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("RentalStore.Model.Film", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("RentalStore.Model.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RentalStore.Model.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
